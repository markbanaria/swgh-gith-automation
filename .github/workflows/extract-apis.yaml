name: Generate Configs (Cron)

on:
  schedule:
    - cron: '0 10 * * *'
  workflow_dispatch:
    inputs:
      log_level:
        description: 'Log level: 1=DEBUG, 2=INFO, 3=WARNING, 4=ERROR'
        required: false
        default: '2'
      skip_api_linting:
        description: 'Skip the API linting job'
        required: false
        default: 'false'

env:
  SWAGGERHUB_API_KEY: ${{ secrets.SWAGGERHUB_API_KEY }}
  SWAGGERHUB_ORG_NAME: ${{ vars.SWAGGERHUB_ORG_NAME }}

jobs:
  fetch-and-group-apis:
    runs-on: ubuntu-latest
    environment: Production
    outputs:
      grouped_file: grouped_apis.json  # Save JSON to a file instead of inline output

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Fetch list of APIs from SwaggerHub
        run: |
          curl -H "Authorization: $SWAGGERHUB_API_KEY" \
               -H "Accept: application/json" \
               "https://api.swaggerhub.com/apis/${{ env.SWAGGERHUB_ORG_NAME }}?limit=100" > swaggerhub_apis.json

      - name: Process and group APIs from SwaggerHub
        run: |
          python3 -c "
          import json

          # Load SwaggerHub APIs response
          with open('swaggerhub_apis.json') as file:
              data = json.load(file)

          # Initialize groups
          groups = {
              'PACS': [],
              'PLUK': [],
              'PLAI': [],
              'PVA': [],
              'PAMB': [],
              'Symphony Big Group': []
          }

          symphony_domains = {}  # For domain-based groups

          # Process each API entry
          for api in data['apis']:
              name = api['name']
              properties = {prop['type']: prop.get('value', prop.get('url', '')) for prop in api['properties']}
              url = properties.get('Swagger', '')
              slug = url.split('/')[-2] if url else ''
              latest_version = properties.get('X-Version', 'N/A')

              # Skip drafts
              if '(DRAFT)' in name:
                  continue

              # Remove 'Prudential Symphony' and 'API' from name
              formatted_name = name.replace('Prudential Symphony', '').replace('API', '').strip()

              # Determine group
              if 'PACS' in name:
                  groups['PACS'].append({
                      'name': formatted_name,
                      'slug': slug,
                      'latest_version': latest_version,
                      'url': url
                  })
              elif 'PLUK' in name:
                  groups['PLUK'].append({
                      'name': formatted_name,
                      'slug': slug,
                      'latest_version': latest_version,
                      'url': url
                  })
              elif 'PLAI' in name:
                  groups['PLAI'].append({
                      'name': formatted_name,
                      'slug': slug,
                      'latest_version': latest_version,
                      'url': url
                  })
              elif 'PVA' in name:
                  groups['PVA'].append({
                      'name': formatted_name,
                      'slug': slug,
                      'latest_version': latest_version,
                      'url': url
                  })
              elif 'PAMB' in name:
                  groups['PAMB'].append({
                      'name': formatted_name,
                      'slug': slug,
                      'latest_version': latest_version,
                      'url': url
                  })
              elif 'Prudential Symphony API' == name:  # Symphony Big Group
                  groups['Symphony Big Group'].append({
                      'name': 'Symphony',
                      'slug': slug,
                      'latest_version': latest_version,
                      'url': url
                  })
              elif 'Prudential Symphony' in name:  # Domain-based grouping
                  domain = formatted_name
                  if domain not in symphony_domains:
                      symphony_domains[domain] = []
                  symphony_domains[domain].append({
                      'name': domain,
                      'slug': slug,
                      'latest_version': latest_version,
                      'url': url
                  })

          # Merge symphony domains with main groups
          groups.update(symphony_domains)

          # Write the grouped data to a JSON file
          with open('grouped_apis.json', 'w') as outfile:
              json.dump(groups, outfile, indent=2)
          "
      - name: Upload grouped JSON
        uses: actions/upload-artifact@v2
        with:
          name: grouped_json
          path: grouped_apis.json

  generate-folders-and-content:
    runs-on: ubuntu-latest
    environment: Production
    needs: fetch-and-group-apis
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download grouped JSON artifact
        uses: actions/download-artifact@v2
        with:
          name: grouped_json
          path: .

      - name: Create folders, populate content, and commit files for each group
        run: |
          python3 -c "
          import json, os

          # Load grouped JSON data from downloaded file
          with open('grouped_apis.json') as f:
              groups = json.load(f)

          # Iterate over each group to create folders, populate content, and commit changes
          for group_name, apis in groups.items():
              folder_path = os.path.join('products', group_name)
              os.makedirs(folder_path, exist_ok=True)

              # Create and populate manifest.json
              manifest_data = {
                  'productMetadata': {
                      'description': f'{group_name} APIs',
                      'slug': f'{group_name.lower()}-api',
                      'public': True,
                      'hidden': False,
                      'logo': 'images/icon.png',
                      'logoDark': 'images/icon-dark.png',
                      'autoPublish': True,
                      'validateAPIs': True
                  },
                  'contentMetadata': [
                      {
                          'order': 0,
                          'parent': '',
                          'name': 'Description',
                          'slug': 'description',
                          'type': 'markdown',
                          'contentUrl': 'description.md'
                      }
                  ] + [
                      {
                          'order': idx + 1,
                          'parent': '',
                          'name': api['name'],
                          'slug': api['slug'],
                          'type': 'apiUrl',
                          'contentUrl': api['url'] + '/swagger.json'
                      }
                      for idx, api in enumerate(apis)
                  ]
              }
              with open(os.path.join(folder_path, 'manifest.json'), 'w') as manifest_file:
                  json.dump(manifest_data, manifest_file, indent=2)

              # Create and populate description.md
              with open(os.path.join(folder_path, 'description.md'), 'w') as description_file:
                  description_file.write(f'# {group_name}\\n\\nThis page contains APIs related to {group_name}.\\n')
                  for api in apis:
                      description_file.write(f'- {api["name"]} (Version: {api["latest_version"]})\\n')
          "

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add products
          git commit -m "Add generated products folders and files"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
